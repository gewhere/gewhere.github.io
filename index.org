#+TITLE: Notes about programming tools
#+AUTHOR: Georgios Diapoulis
#+EMAIL: gediapou[at]student[dot]jyu[dot]fi


* About
These are personal notes, if anyone finds this documentation helpful I will be glad too.  I adopt this template from [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua]], and it is written in [[http://orgmode.org/][Orgmode]].  You can find the orgmode and html files on github repository [[https://github.com/gewhere/gewhere.github.io][here]].

* Github
I am learning how to use github, it's pretty handy, just needs some time and repetitive practice.  The basic steps are below:

** Git locally
You can use git only locally, though one of the main concept behind git and version control systems is that of collaborative coding.

#+BEGIN_SRC sh :results silent
git init 			# initialize a folder .git/
# create a file
touch newfile 			# Ctrl+D to save and exit
git status 			# now newfile is untracked
git add newfile 		# to bring file in the staged level
git commit -m 'Initial commit' 	# to make file ready for push
#+END_SRC

Branching is a core concept for handling big programming projects.

#+BEGIN_SRC sh :results silent
git brach NewBranch    	# creates a new branch
git branch             	# returns the working branch
git checkout NewBranch 	# you are now in the NewBranch
touch newfile          	# create a newfile in the NewBranch
                       	# this file does not exists in the working directory
                       	# unless you 'git merge'
git checkout master    	# the master branch is by default the branch that git initialise
git merge NewBranch    	# at this point the newfile appears
#+END_SRC

** Git publicly
When you =git clone= a repository to your hard disc, you clone this from a /remote/.

#+BEGIN_SRC sh :results silent
git remote 		# this should return 'origin'
git remote -v 		# returns the online repository
git push origin master 	# git asks for credentials
#+END_SRC



* Orgmode
I am using GNUPLOT to plot orgmode's tables.

#+BEGIN_SRC emacs-lisp
(local-set-key "\M-\C-g" 'org-plot/gnuplot)
#+END_SRC

#+RESULTS:
: org-plot/gnuplot

# <<<<<<< HEAD
** Org-tables and GNUPLOT
The examples below are the key profiles of Krumhansl-Kessler probe-tone empirical research, as presented by Tamperley (1999).
# =======

I use org-plot installed via =M-x package-install= RET =gnuplot=.  I have also added gnuplot to babel languages.

#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((gnuplot . t)))
#+END_SRC

# ** Orgmode and ditaa

# #+BEGIN_SRC ditaa :file ./img/hello-world.png
# +--------------+
# |              |
# | Hello World! |
# |              |
# +--------------+
# #+END_SRC



** Org-tables
The examples below are the major and minor profiles of Krumhansl-Kessler key-finding algorithm based on the probe-tone technique, as presented by Tamperley (1999).
# >>>>>>> master

#+BEGIN_EXAMPLE
#+PLOT: title:"Krumhansl-Kessler C major key profile" ind:1 deps:(2) type:2d with:histograms set:"yrange[0.0:7.0]"
#+PLOT: file:"~/code/learn-git/gewhere.github.io/img/major.png"
#+TBLNAME:major-key
| Key  |      |
|------+------|
| Do   | 6.35 |
| Do#  | 2.23 |
| Re   | 3.48 |
| Re#  | 2.33 |
| Mi   | 4.38 |
| Fa   | 4.09 |
| Fa#  | 2.52 |
| Sol  | 5.19 |
| Sol# | 2.39 |
| La   | 3.66 |
| La#  | 2.29 |
| Si   | 2.88 |
#+END_EXAMPLE

[[./img/major.png]]

#+PLOT: title:"Krumhansl-Kessler C minor key profile" ind:1 deps:(2) type:2d with:histograms set:"yrange[0.0:7.0]"
#+PLOT: file:"./img/minor.png"
#+TBLNAME:minor-key
| Key  |      |
|------+------|
| La   | 6.33 |
| La#  | 2.68 |
| Si   | 3.52 |
| Do   | 5.38 |
| Do#  | 2.60 |
| Re   | 3.53 |
| Re#  | 2.54 |
| Mi   | 4.75 |
| Fa   | 3.98 |
| Fa#  | 2.69 |
| Sol  | 3.34 |
| Sol# | 3.17 |

[[./img/minor.png]]
** Org-tables and id
I am importing values that I have calculated in =grades.org= file ([[https://github.com/gewhere/gewhere.github.io/blob/master/grades.org][link]]).  The id value must be *unique*.  You can create a /unique id/ with =M-x org-id-get-create=.


*** Get values from file
The source code is as folows:

#+BEGIN_EXAMPLE

| Name  | Grade   |
|-------+---------|
| _     | grade01 |
| Nick  | 8       |
| _     | grade02 |
| Brad  | 6       |
| _     | grade03 |
| Marie | 8       |
#+TBLFM: $grade01 = remote(grades-overall, $overall01);%.0f::$grade02 = remote(grades-overall, $overall02);%.0f::$grade03 = remote(grades-overall, $overall03);%.0f

#+END_EXAMPLE

*** Append orgmode tables

#+BEGIN_ORG

#+name: table-names
- tbl1
- tbl2

#+name: tbl1
| a | 1 |
| b | 2 |
|---+---|

#+name: tbl2
| c | 3 |
| d | 4 |
|---+---|

#+END_ORG

#+BEGIN_SRC emacs-lisp :var table-names=table-names
(mapcan #'org-babel-ref-resolve table-names)
#+END_SRC

Results to the following:
#+BEGIN_ORG

| a | 1 |
| b | 2 |
|---+---|
| c | 3 |
| d | 4 |
|---+---|

#+END_ORG

* Emacs
** Using Magit
Magit is an emacs package with which you can handle git more interactively.  With following steps you can push your code on github. With =M-x magit-status= magit opens a buffer which tracks your activity.  In this buffer you can see your local path to the working directory, your remotes, and the last commit online (=Head=).

At the top of your files in the magit's buffer there is a button like text region which says either =Unstaged changes= for files that are untracked, either =Staged Changes= for files that are in the staged level, or =Unpushed commits=.
- =M-x magit-status= OR =C-x g=
#+BEGIN_EXAMPLE
s => to stage
c c => to commit
P P => to push
#+END_EXAMPLE

*** Using branches
- By default git uses a =master= branch.  To switch to a different branch (let the name of the branch  *source*) =M-x magit-status= and =b=, and =b= for /checkout/.
- To apply the changes of =source= branch to =master=, *checkout* to master branch and merge.  Be sure that you don't have any unstaged changes.
- After this step your changes have been applied to =master= branch and you are ready to =stage= and =commit= them.

[[./img/magit-log.png]]

* Bibliography


#+BEGIN_HTML

<div id="bibtex_display"></div>

<textarea id="bibtex_input" style="display:none;">

@article{temperley1999s,
  title={What's key for key? The Krumhansl-Schmuckler key-finding algorithm reconsidered},
  author={Temperley, David},
  journal={Music Perception},
  pages={65--100},
  year={1999},
  publisher={JSTOR}
}



</textarea>

<div class="bibtex_template">
  <li>
    <span class="if author">
      <span class="author"></span>
    </span>
    <span class="if year">
      (<span class="year"></span>).&nbsp
    </span>
    <a class="url"><span class="title"></span></a>.
    <span class="if journal">
      In <span class="journal" style="font-style: italic;"></span>.
    </span>
    <span class="if booktitle">
      In <span class="booktitle" style="font-style: italic;"></span>.
    </span>
    <span class="if phdthesis">
      <span class="phdthesis" style="font-style: italic;"></span>, PhD dissertation.
    </span>
    <span class="if school">
      <i>PhD dissertation,</i>&nbsp<span class="school"></span>.
    </span>
    <span class="if volume" style="font-style: italic;">
      <span class="volume"></span>
      <span class="if number" style="font-style: italic;">(<span class="number"></span>)</span>,&nbsp
      <span class="if pages">
        <span class="pages"></span>.&nbsp
      </span>
    </span>
    <span class="if edition">
      <span class="edition"></span> ed.,
    </span>
    <span class="if publisher">
      <span class="publisher"></span>.
    </span>
  </li>
</div>

#+END_HTML


#+BEGIN_HTML

<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript"
src="http://bibtex-js.googlecode.com/svn/trunk/src/bibtex_js.js"></script>

#+END_HTML
