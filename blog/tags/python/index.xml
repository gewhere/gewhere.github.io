<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Georgios Diapoulis personal blog</title>
    <link>http://gewhere.github.io/blog/tags/python/</link>
    <description>Recent content in Python on Georgios Diapoulis personal blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>Licence CC BY-SA 4.0</copyright>
    <lastBuildDate>Mon, 16 Oct 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://gewhere.github.io/blog/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Using python to call different code blocks in babel</title>
      <link>http://gewhere.github.io/blog/2017/10/16/using-python-to-call-different-code-blocks-in-babel/</link>
      <pubDate>Mon, 16 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>http://gewhere.github.io/blog/2017/10/16/using-python-to-call-different-code-blocks-in-babel/</guid>
      <description>This entry has two main ways to call different code blocks from babel. The first example is based on an example from Eric Shulte org-scraps using session header argument and the second is based on a noweb example that I found here. Also, the last example shows how to call a named code block using #+CALL.
Persistent python Import modules from scikit-learn library using untitled session header argument. The example below shows the raw orgmode content.</description>
    </item>
    
    <item>
      <title>Live coding using SC3 and scikit-learn</title>
      <link>http://gewhere.github.io/blog/2017/10/13/live-coding-using-sc3-and-scikit-learn/</link>
      <pubDate>Fri, 13 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>http://gewhere.github.io/blog/2017/10/13/live-coding-using-sc3-and-scikit-learn/</guid>
      <description>This blog post is about machine learning techniques in live coding. I particularly focused on SuperCollider (SC3) and scikit-learn library for Python3. The main procedure was to send data over Open Sound Control (OSC) protocol, using pythonosc, and to analyze the data in Python3. The data analysis results are sending back to sclang in real-time for parameter control of UGens.
Description and order of execution The main idea is to get input of environmental sounds using a microphone (also input from speakers works fine), and to analyze the input based on Chromagram class from SC3.</description>
    </item>
    
  </channel>
</rss>