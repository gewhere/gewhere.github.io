<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Supercollider on Georgios Diapoulis personal blog</title>
    <link>http://gewhere.github.io/blog/tags/supercollider/</link>
    <description>Recent content in Supercollider on Georgios Diapoulis personal blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>This work is licensed under a Creative Commons Attribution 3.0 Unported License unless otherwise noted.</copyright>
    <lastBuildDate>Mon, 30 Oct 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://gewhere.github.io/blog/tags/supercollider/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>The very firsts step to SC3</title>
      <link>http://gewhere.github.io/blog/2017/10/30/the-very-firsts-step-to-sc3/</link>
      <pubDate>Mon, 30 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>http://gewhere.github.io/blog/2017/10/30/the-very-firsts-step-to-sc3/</guid>
      <description>SuperCollider is a powerful programming environment for live music making. It is a textual programming language, combined with a state-of-art sound engine. The basic architecture is based on client-server model, which means that you launch two separate applications, the language (sclang, client) and the sound synthesis engine (scsynth, server). The online help is available at sccode, and the mailing list at nabble.
How to start In order to make some sound, the first step is to launch scsynth.</description>
    </item>
    
    <item>
      <title>Live coding using SC3 and scikit-learn</title>
      <link>http://gewhere.github.io/blog/2017/10/13/live-coding-using-sc3-and-scikit-learn/</link>
      <pubDate>Fri, 13 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>http://gewhere.github.io/blog/2017/10/13/live-coding-using-sc3-and-scikit-learn/</guid>
      <description>This blog post is about machine learning techniques in live coding. I particularly focused on SuperCollider (SC3) and scikit-learn library for Python3. The main procedure was to send data over Open Sound Control (OSC) protocol, using pythonosc, and to analyze the data in Python3. The data analysis results are sending back to sclang in real-time for parameter control of UGens.
Description and order of execution The main idea is to get input of environmental sounds using a microphone (also input from speakers works fine), and to analyze the input based on Chromagram class from SC3.</description>
    </item>
    
  </channel>
</rss>