<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Georgios Diapoulis personal blog</title>
    <link>http://gewhere.github.io/blog/post/</link>
    <description>Recent content in Posts on Georgios Diapoulis personal blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>Licence CC BY-SA 4.0</copyright>
    <lastBuildDate>Mon, 16 Oct 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://gewhere.github.io/blog/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Using python to call different code blocks in babel</title>
      <link>http://gewhere.github.io/blog/2017/10/16/using-python-to-call-different-code-blocks-in-babel/</link>
      <pubDate>Mon, 16 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>http://gewhere.github.io/blog/2017/10/16/using-python-to-call-different-code-blocks-in-babel/</guid>
      <description>This entry has two main ways to call different code blocks from babel. The first example is based on an example from Eric Shulte org-scraps using session header argument and the second is based on a noweb example that I found here. Also, the last example shows how to call a named code block using #+CALL.
Persistent python Import modules from scikit-learn library using untitled session header argument. The example below shows the raw orgmode content.</description>
    </item>
    
    <item>
      <title>Print SynthDef list using SynthDescLib</title>
      <link>http://gewhere.github.io/blog/2017/10/15/print-synthdef-list-using-synthdesclib/</link>
      <pubDate>Sun, 15 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>http://gewhere.github.io/blog/2017/10/15/print-synthdef-list-using-synthdesclib/</guid>
      <description>The following code chunks print the full list of the synth defitions (SynthDef) that are loaded in the server. A Synthdef is the client side representation of a synth on the server-side.
SynthDef library // print all the SynthDefs ( SynthDescLib.global.synthDescs.associationsDo { |assoc| var name = assoc.key, code = assoc.value.def.func.def.sourceCode; code.notNil.if { &amp;quot;&amp;quot;.postln; name.post; &amp;quot;: &amp;quot;.postln; code.postln; }; }; &amp;quot;&amp;quot;; ) ( SynthDescLib.global.synthDescs.do { |desc| if(desc.def.notNil) { &amp;quot;\nSynthDef %\n&amp;quot;.postf(desc.name.asCompileString); desc.def.func.postcs; }; }; &amp;quot;&amp;quot; // this prevents the synthDescs collection from posting )  </description>
    </item>
    
    <item>
      <title>Live coding using SC3 and scikit-learn</title>
      <link>http://gewhere.github.io/blog/2017/10/13/live-coding-using-sc3-and-scikit-learn/</link>
      <pubDate>Fri, 13 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>http://gewhere.github.io/blog/2017/10/13/live-coding-using-sc3-and-scikit-learn/</guid>
      <description>This blog post is about machine learning techniques in live coding. I particularly focused on SuperCollider (SC3) and scikit-learn library for Python3. The main procedure was to send data over Open Sound Control (OSC) protocol, using pythonosc, and to analyze the data in Python3. The data analysis results are sending back to sclang in real-time for parameter control of UGens.
Description and order of execution The main idea is to get input of environmental sounds using a microphone (also input from speakers works fine), and to analyze the input based on Chromagram class from SC3.</description>
    </item>
    
    <item>
      <title>Moving to Hugo</title>
      <link>http://gewhere.github.io/blog/2017/10/12/moving-to-hugo/</link>
      <pubDate>Thu, 12 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>http://gewhere.github.io/blog/2017/10/12/moving-to-hugo/</guid>
      <description>This blog entry provide information about the setup of a Hugo blog using orgmode. Hugo has been established in the field of static websites and blogs. It is based on Go programming language. The user is writing her posts in Markdown which makes it easy to use. I decided to quit Jekyll (and particular org2jekyll) and to begin a new blog using Hugo &amp; orgmode. Hugo has a large collection of templates, and the present template is called hugo-dusk.</description>
    </item>
    
  </channel>
</rss>